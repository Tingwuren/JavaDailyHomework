问题 E: Blackjack

一、问题描述：
21点又名黑杰克（Blackjack），起源于法国，已流传到世界各地，有着悠久的历史。
现在在世界各地的赌场中都可以看到二十一点。随着互联网的发展，二十一点开始走向网络时代。
该游戏由2到6个人玩，使用除大小王之外的52张牌，游戏者的目标是使手中的牌的点数之和不超过21点且尽量大。
大家手中扑克点数的计算规则是：
2至9牌，按其原点数计算；
K、Q、J和10牌都算作10点；
A 牌（ace）既可算作1点也可算作11点，由玩家自己决定
（当玩家停牌时，点数一律视为最大而尽量不爆，如A+9为20，A+4+8为13，A+3+A视为15）。
你的任务设计基于指定策略的一个21点游戏的部分功能。
指定策略为：
如果手中牌的点数之和小于17点则继续要下一张牌，直到大于等于17点为止。
如果手里的牌有A，且A的点数当成11点没有超过21点，则此时A要按11点计算，如果超过21点，则A要按1点计算。
一个参考的设计为：
1、设计一个card类，用于保存一张牌；
2、设计一个hand类，用于保存一手牌；
3、设计一个player类，该类可以基于指定策略完成一次游戏过程。

二、输入：
若干行（至少2行），每行代表一张牌。具体格式见样例。

三、输出：
若干行。
读入前两张牌不输出，
从第三张牌开始（如果需要），则每次要牌，要先输出Hit，然后读入下一张牌，
并依次输出该牌的花色及点数（A输出1 11，即它有两个点数）。
当不再要牌时要先输出Stand，然后在一行内输出这一手牌，牌与牌之间用一个空格分隔。
牌输出的顺序为先看牌面，牌面小的在前（牌面由小到大的顺序为A,2,3....J,Q,K），
当牌面相同时看花色，输出顺序从前到后为Spade, Heart, Diamond, Club。
最后一行输出这一手牌的结果，如果总点数超过21点，则输出Bust，
如果是Blackjack（一手牌只有两张牌且点数相加和为21点），则输出Blackjack。
其他情况则输出一个整数，代表这手牌的点数（尽量大且不爆）。具体格式见样例。

四、样例输入：
Spade 4
Heart A
Heart 3

五、样例输出：
Hit
Heart 3
Stand
HeartA Heart3 Spade4
18

六、考察点：
1.面向对象编程：使用了面向对象的思想，将一张牌、一手牌和玩家都封装成了一个类，
通过类与类之间的关系来实现程序的逻辑。

2.类与对象：定义了Card、Hand和Player三个类，
其中Card表示一张扑克牌，包括花色、点数以及点数值等属性；
Hand表示一手牌，可以添加牌、计算点数等操作；
Player代表玩家，在游戏中执行指定策略，如何要牌、判断是否应该继续要牌等。

3.集合框架：使用了Java中的集合框架来保存一组牌（List<Card>）并进行洗牌（Collections.shuffle）。

4.输入输出流：使用了Java中的Scanner类从标准输入读入数据，并使用System.out.println方法输出结果。

5.条件语句和循环语句：使用了if语句和while循环来实现游戏过程中的各种判断和条件控制。

6.接口实现：使用了Comparable接口来实现Card类的排序功能。

七、调试日志：
1.未输出Hit信息
问题：在读入第二张牌后判断而不是读入第三张牌后判断
解决：将判断条件中的3改变为2

2.输出整副牌时顺序有问题
问题：Card的compareTo方法有问题

3.答案错误65%
问题：
可能没有考虑牌数上限
解决：
添加循环条件，使总牌数上限变为9

仍然65%，可能存在的问题：
手牌在输出时顺序出现问题；
先看牌面顺序时没有考虑JQK的顺序问题：
解决：
在Card类中添加getOrder方法

4.答案错误75%
